const express = require('express');
const app = express();
//const fetch = require('node-fetch')
const path = require('path');
const mongoose = require('mongoose');
const { response } = require('express');
const { count, info } = require('console');
const { kStringMaxLength } = require('buffer');
const DB_url = "mongodb+srv://shiv:shiv8055@cluster0.eucdfaf.mongodb.net/?retryWrites=true&w=majority"

mongoose.connect(DB_url, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log("DATABASE CONNECTION Successful")
    })
    .catch(err => {
        console.log("error")
        console.log(err)
    })

const userSchema = new mongoose.Schema({

      name: {
            type: String
        },
        email: {
            type: String
        },
        username: {
            type: String
        },
        password: {
            type: String
        }
    })
    
    const Account = mongoose.model('Account', userSchema);

    const eventSchema = new mongoose.Schema({

        title: {
              type: String
          },
          type: {
              type: String
          },
          max: {
              type: String
          },
          startDate: {
              type: String
          },
          endDate: {
            type: String
        },
        startPoint: {
            type: String
        },
        destination: {
            type: String
        },
        description: {
            type: String
        },
        username:{
            type: String
        }
      })
      
      const Event = mongoose.model('Event', eventSchema);
  
    app.use(express.static(path.join(__dirname, 'public')))
    app.set('view engine', 'ejs')
    app.set('views', path.join(__dirname, 'views'))
    app.use(express.urlencoded({extended: true}))
    
    app.get('/', async (req, res) => {
        //res.send(list2)
        res.render('login');
    })

    app.get('/signup', async (req, res) => {
        res.render('signup');
    })

    app.get("/register", function (req, res) {
        res.render("register");
    });

    app.post('/signup',async(req,res)=>{
        const {name,email,username,password} = req.body;
        const info = new Account({
            name: name,
            email: email,
            username: username,
            password: password
        })
        info.save();
        res.redirect('/')
    })
    app.get('/updatehome',async (req,res) => {
        const event = await Events.find({})
        res.redirect('home', {event})
    })
    app.post('/addEvent',async(req,res)=>{
        const {title,type,max,startDate,endDate,startPoint,destination,description} = req.body;
        const info = new Event({
            title:title,
            type:type,
            max:max,
            startDate:startDate,
            endDate:endDate,
            startPoint:startPoint,
            destination:destination,
            description:description,
            username:"shiv"
        })
        //SHOW
        
        info.save();
        const events = await Event.find({})
        res.render('home',{events})
    })

    app.get('/host',async(req,res)=>{
        res.render('host')
    })
    app.get('/:id',async(req,res)=>{
        const event =await Event.findById(req.params.id)
        res.render('show',{event});
    })
    app.get('/joined',async(req,res)=>{
        const event =await Event.find({})
        res.render('join',{event});
    })

    app.post('/login', async(req,res)=>{
        const events = await Event.find({})
        res.render('home',{events})
    })
    
    
app.listen(process.env.PORT || 3000, () => {  
    console.log('Serving on port 80')
})
